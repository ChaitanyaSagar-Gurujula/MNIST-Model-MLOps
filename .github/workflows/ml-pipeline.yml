name: MNIST CI/CD Pipeline

# Add permissions at the job level
permissions:
  contents: write      # This allows creating releases
  pull-requests: read  # If you need to read PR information
  issues: write       # If you need to comment on issues

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    # 1. Install dependencies
    - name: Install dependencies and package
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    # 2. Train model
    - name: Train and save model
    #  env:
    #    PYTHONPATH: ${{ github.workspace }}
      run: |
        python -m src.train

    # 3. Upload trained model as artifact
    - name: Upload model artifact
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: best_model.pth

    # 4. Run all tests (including model performance tests)
    - name: Run tests
      run: |
        pytest tests/ -v --junitxml=test-results.xml
        
    # 5. Upload test results
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results.xml
        
    # 6. First create the release and capture its outputs
    - name: Create Release
      id: create_release
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Model trained and validated successfully
          - Training Accuracy: > 95%
          - Test Accuracy: > 95%
          - Parameters: < 25k
        draft: false
        prerelease: false

    # Then use the upload_url from the previous step
    - name: Upload Release Asset
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./best_model.pth
        asset_name: best_model.pth
        asset_content_type: application/octet-stream